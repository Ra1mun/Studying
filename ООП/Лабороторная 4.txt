Часть 1. Создать класс СStr (упрощенный аналог string из STL).

Класс СStr должен содержать строку символов (указатель char*, строка должна выделяться динамически и заканчиваться нулем). Длину строки хранить не нужно. В классе СStr нужно реализовать:

private-метод для генерации случайной строки заданной длины (<=20 строчных латинских букв + нуль, возвращает указатель на строку)
конструктор по умолчанию (без параметров), создающий случайную строку случайной длины (от 1 до 20 символов) и использующий private-метод генерации
конструктор с параметром «строка» (char *, заканчивается нулем)
конструктор с параметром «длина строки» (<=20), использующий private-метод генерации
конструктор копий
деструктор
оператор присваивания объекта СStr, оператор присваивания строки (char *)
оператор сравнения > (или <) объектов CStr по их содержимому (сравнение строк)
оператор проверки равенства (==)  объектов CStr (равенства строк)
метод, возвращающий длину строки.
Кроме того, нужно реализовать friend-оператор вывода в поток <<.

Часть 2. Добавить к проекту класс СStrArray.

Класс CStrArray должен содержать динамический массив объектов CStr или указателей на них. Необходимые методы:

конструктор с параметром «длина массива»
деструктор
оператор индексации []
сортировка по содержимому строк (любая)
сортировка по длине строк (любая)
бинарный поиск строки в упорядоченном массиве
проверка упорядоченности массива по содержимому строк.
Кроме того, реализовать оператор << (не выводить на экран массивы длиной больше 50).

В функции main нужно создать объект CStrArray с массивом заданной длины, проводить сортировку по содержимому (с проверкой) и длине строк, выводить отсортированные массивы и проверить наличие заданной строки в упорядоченном массиве